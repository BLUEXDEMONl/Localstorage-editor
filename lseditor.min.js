javascript:(function () {
  if (window.lsEditorInst) return;
  const $ = (s, c = document) => (c || document).querySelector(s);
  const el = (t, p = {}, ...k) => {
    const e = document.createElement(t);
    Object.assign(e, p);
    k.forEach(x => e.appendChild(typeof x === 'string' ? document.createTextNode(x) : x));
    return e;
  };

  /* ---------- Apple-style liquid-glass toggle button ---------- */
  const btn = el('button', {
    id: 'ls-glass-btn',
    title: 'Edit localStorage',
    style: `
      position:fixed; bottom:24px; right:24px; z-index:2147483647;
      width:60px; height:60px; border:none; border-radius:50%;
      background:rgba(255,255,255,.30);
      backdrop-filter:blur(24px) saturate(180%);
      -webkit-backdrop-filter:blur(24px) saturate(180%);
      box-shadow:
        0 4px 20px rgba(0,0,0,.20),
        inset 0 1px 2px rgba(255,255,255,.40),
        inset 0 -1px 2px rgba(0,0,0,.10);
      cursor:pointer; transition:transform .15s;
    `,
    innerHTML: `
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M12 2L2 7v10l10 5 10-5V7l-10-5zM12 4.09L19.91 8 12 11.91 4.09 8 12 4.09z"
              fill="rgba(0,0,0,.65)"/>
        <path d="M2 8l10 5 10-5M2 12l10 5 10-5M2 16l10 5 10-5"
              stroke="rgba(0,0,0,.65)" stroke-width="1.5" stroke-linecap="round"/>
      </svg>`
  });

  /* ---------- panel (starts hidden) ---------- */
  const panel = el('div', {
    id: 'ls-panel',
    style: `
      position:fixed; top:10px; right:10px; width:320px; max-height:90vh;
      background:#fff; border:1px solid #999; border-radius:8px; padding:8px;
      font-family:sans-serif; font-size:13px; z-index:10000;
      display:flex; flex-direction:column;
      transition:transform .25s ease, opacity .25s ease;
      transform:scale(0); opacity:0; transform-origin:top right;
    `
  });

  /* ---------- build panel ---------- */
  const title = el('div', { textContent: 'localStorage editor', style: 'font-weight:bold;margin-bottom:6px;' });
  const closeBtn = el('button', { textContent: 'âœ•', style: 'float:right;border:none;background:transparent;' });
  title.appendChild(closeBtn);
  const list = el('div', { style: 'overflow-y:auto;flex:1;' });
  const addBox = el('div', { style: 'display:flex;gap:4px;margin-top:6px;' });
  const newKey = el('input', { placeholder: 'key', style: 'flex:1;' });
  const newVal = el('input', { placeholder: 'value', style: 'flex:2;' });
  const addBtn = el('button', { textContent: 'Add' });
  addBox.append(newKey, newVal, addBtn);
  const footer = el('div', { style: 'display:flex;gap:4px;margin-top:6px;' });
  const exportBtn = el('button', { textContent: 'Download JSON' });
  const importBtn = el('button', { textContent: 'Upload JSON' });
  const fileIn = el('input', { type: 'file', accept: '.json', style: 'display:none;' });
  footer.append(exportBtn, importBtn, fileIn);
  panel.append(title, list, addBox, footer);
  document.documentElement.appendChild(panel);

  /* ---------- helpers ---------- */
  const isFiltered = k => k.startsWith('eruda');
  const render = () => {
    list.innerHTML = '';
    for (let i = 0; i < localStorage.length; i++) {
      const k = localStorage.key(i);
      if (isFiltered(k)) continue;
      const row = el('div', { style: 'display:flex;align-items:center;margin:2px 0;' });
      const keySpan = el('span', { textContent: k, style: 'min-width:100px;word-break:break-all;' });
      const valInput = el('input', { value: localStorage.getItem(k), style: 'flex:1;margin:0 4px;' });
      const delBtn = el('button', { textContent: 'ðŸ—‘', title: 'Delete' });
      valInput.addEventListener('input', () => localStorage.setItem(k, valInput.value));
      delBtn.onclick = () => { localStorage.removeItem(k); render(); };
      row.append(keySpan, valInput, delBtn);
      list.appendChild(row);
    }
  };

  /* ---------- events ---------- */
  let open = false;
  const toggle = () => {
    open = !open;
    panel.style.transform = open ? 'scale(1)' : 'scale(0)';
    panel.style.opacity = open ? '1' : '0';
  };
  btn.onclick = toggle;
  closeBtn.onclick = toggle;

  addBtn.onclick = () => {
    const k = newKey.value.trim();
    if (!k || isFiltered(k)) return;
    localStorage.setItem(k, newVal.value);
    newKey.value = newVal.value = '';
    render();
  };

  exportBtn.onclick = () => {
    const exp = {};
    for (let i = 0; i < localStorage.length; i++) {
      const k = localStorage.key(i);
      if (!isFiltered(k)) exp[k] = localStorage.getItem(k);
    }
    const blob = new Blob([JSON.stringify(exp, null, 2)], { type: 'application/json' });
    const a = el('a', { href: URL.createObjectURL(blob), download: 'localStorage.json' });
    a.click();
  };

  importBtn.onclick = () => fileIn.click();
  fileIn.onchange = e => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
      try {
        const data = JSON.parse(reader.result);
        Object.keys(data).forEach(k => { if (!isFiltered(k)) localStorage.setItem(k, data[k]); });
        render();
      } catch { alert('Invalid JSON'); }
    };
    reader.readAsText(file);
  };

  render();
  window.lsEditorInst = true;
})();
  
